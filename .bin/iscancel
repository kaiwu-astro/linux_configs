#!/usr/bin/env python3
import curses
import subprocess
import sys

def get_jobs():
    """获取当前用户的 Slurm 任务列表，并解析出字段。"""
    result = subprocess.run(["squeue", "--me", '--sort=j,i'], capture_output=True, text=True)
    lines = result.stdout.strip().split("\n")
    if len(lines) < 2:
        return [], [], -1
    headers = lines[0].split()
    jobid_index = headers.index("JOBID")
    jobs = [line.split(maxsplit=len(headers) - 1) for line in lines[1:]]
    return headers, jobs, jobid_index

def interactive_cancel(stdscr):
    curses.curs_set(0)
    stdscr.timeout(2000)  # Set a 2-second timeout for getch()
    stdscr.clear()
    headers, jobs, jobid_index = get_jobs()
    
    selected = 0
    while True:
        stdscr.clear()
        
        if not jobs:
            # Return a message to be printed after curses exits
            return "No jobs found for the current user."
        
        try:
            stdscr.addstr(0, 0, "Use UP/DOWN to navigate, Q to quit, C/K to send scancel, 3 to send SIGQUIT")
            stdscr.addstr(1, 0, "{:<10} {:<10} {:<10} {:<5} {:<3} {:<8} {:<6} {:<10}".format(*headers))
            for idx, job in enumerate(jobs):
                line = "{:<10} {:<10} {:<10} {:<5} {:<3} {:<8} {:<6} {:<10}".format(*job)
                if idx == selected:
                    stdscr.attron(curses.A_REVERSE)
                    stdscr.addstr(idx + 2, 0, line)
                    stdscr.attroff(curses.A_REVERSE)
                else:
                    stdscr.addstr(idx + 2, 0, line)
        except curses.error:
            stdscr.addstr(0, 0, " @@@ too many jobs ! not enough vertial space @@@")
        
        key = stdscr.getch()
        if key == curses.KEY_UP:
            selected = (selected - 1 + len(jobs)) % len(jobs)
            continue
        elif key == curses.KEY_DOWN:
            selected = (selected + 1) % len(jobs)
            continue
        elif key in (ord('k'), ord('K'), ord('c'), ord('C')):
            job_id = jobs[selected][jobid_index]
            subprocess.run(["scancel", job_id])
            headers, jobs, jobid_index = get_jobs()
            if selected >= len(jobs):
                selected = max(0, len(jobs) - 1)
        elif key == ord('3'):
            # Send QUIT signal to selected job
            job_id = jobs[selected][jobid_index]
            subprocess.run(["scancel", "--signal=QUIT", job_id])
            headers, jobs, jobid_index = get_jobs()
            if selected >= len(jobs):
                selected = max(0, len(jobs) - 1)
        elif key in (ord('q'), ord('Q')):
            break
        
        # Refresh job list on timeout (when getch returns -1) or any other key
        headers, jobs, jobid_index = get_jobs()
        if selected >= len(jobs):
            selected = max(0, len(jobs) - 1)
        
        stdscr.refresh()

if __name__ == "__main__":
    if sys.version_info < (3, 7):
        print("Python version >= 3.7 is required.")
        sys.exit(1)
    message = curses.wrapper(interactive_cancel)
    if message:
        print(message)
